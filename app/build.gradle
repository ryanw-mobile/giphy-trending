plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'androidx.navigation.safeargs'
    id 'dagger.hilt.android.plugin'
    id "org.jetbrains.kotlinx.kover" version "0.5.1"
    id "org.jlleitschuh.gradle.ktlint" version "11.0.0"
}

android {
    compileSdk 33

    signingConfigs {
        release
    }

    def isRunningOnTravis = System.getenv("CI") == "true"
    def isRunningOnBitrise = System.getenv("BITRISE") == "true"

    if (isRunningOnBitrise) {
        // configure keystore
        // File Downloaderで指定したパス
        signingConfigs.release.storeFile = file(System.getenv("HOME") + "/keystores/release.jks")
        signingConfigs.release.storePassword = System.getenv("BITRISEIO_ANDROID_KEYSTORE_PASSWORD")
        signingConfigs.release.keyAlias = System.getenv("BITRISEIO_ANDROID_KEYSTORE_ALIAS")
        signingConfigs.release.keyPassword = System.getenv("BITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD")

        // Extra keys attached in the keystore.properties
        defaultConfig.buildConfigField 'String', 'GIPHY_API_KEY', System.getenv("giphyApiKey")

    } else if (isRunningOnTravis) {
        // configure keystore
        signingConfigs.release.storeFile = file("../secure.keystore")
        signingConfigs.release.storePassword = System.getenv("storePass")
        signingConfigs.release.keyAlias = System.getenv("alias")
        signingConfigs.release.keyPassword = System.getenv("pass")

        // Extra keys attached in the keystore.properties
        defaultConfig.buildConfigField 'String', 'GIPHY_API_KEY', System.getenv("giphyApiKey")
    } else {
        Properties keyProps = new Properties()
        keyProps.load(new FileInputStream(file('../../keystore.properties')))
        signingConfigs.release.storeFile = file(keyProps["store"])
        signingConfigs.release.keyAlias = keyProps["alias"]
        signingConfigs.release.storePassword = keyProps["storePass"]
        signingConfigs.release.keyPassword = keyProps["pass"]

        // Extra keys attached in the keystore.properties
        defaultConfig.buildConfigField 'String', 'GIPHY_API_KEY', keyProps["giphyApiKey"]
    }


    defaultConfig {
        applicationId "uk.ryanwong.giphytrending"
        minSdk 21
        targetSdk 32
        versionCode 5
        versionName "1.4.0"
        resConfigs 'en'

        vectorDrawables.useSupportLibrary = true

        testInstrumentationRunner "uk.ryanwong.giphytrending.CustomTestRunner"

        // Bundle output filename
        setProperty("archivesBaseName", "giphy-" + versionName + "-" + new Date().format('yyyyMMdd-HHmmss'))

        // Configurable values - We are able to set different values for each build
        buildConfigField 'String', 'GIPHY_ENDPOINT', '"https://api.giphy.com/"'
        buildConfigField 'String', 'DATABASE_NAME', '"trending.db"'
        buildConfigField 'String', 'API_MAX_ENTRIES', '"100"'
        buildConfigField 'String', 'API_RATING', '"G"'
    }

    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            minifyEnabled false

            signingConfig signingConfigs.release
            applicationVariants.all { variant ->
                variant.outputs.all { output ->
                    def date = new Date()
                    def formattedDate = date.format('yyyyMMdd-HHmmss')
                    outputFileName = "giphy-${variant.name}-${variant.versionName}-${formattedDate}.apk"
                }
            }
        }
        benchmark {
            signingConfig signingConfigs.debug
            matchingFallbacks = ['release']
            debuggable false
        }

        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.release
            applicationVariants.all { variant ->
                variant.outputs.all { output ->
                    def date = new Date()
                    def formattedDate = date.format('yyyyMMdd-HHmmss')
                    outputFileName = "giphy-${variant.name}-${variant.versionName}-${formattedDate}.apk"
                }
            }
        }
    }

    buildFeatures {
        dataBinding true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
        freeCompilerArgs += [
                "-Xjvm-default=all",
        ]
    }
    /**
     * Source sets can no longer contain shared roots as this is impossible to represent in the IDE.
     * In order to share sources between test and androidTest we should be able to use test fixtures.
     */
//    testFixtures {
//        enable = true
//        androidResources = true
//    }
    sourceSets {
        // androidTest.java.srcDirs += "src/testFixtures/java"
        test.java.srcDirs += "src/testFixtures/java"
    }
    testOptions {
        animationsDisabled = true
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/AL2.0', 'META-INF/LGPL2.1', 'META-INF/licenses/ASM']
            pickFirsts += ['win32-x86-64/attach_hotspot_windows.dll', 'win32-x86/attach_hotspot_windows.dll']
        }
    }
    testOptions.unitTests {
        includeAndroidResources = true
        returnDefaultValues = true
    }
    // Kotest
    android.testOptions {
        unitTests.all {
            useJUnitPlatform()
        }
    }
}

dependencies {
    implementation 'androidx.core:core-splashscreen:1.0.0'
    implementation 'androidx.core:core-ktx:1.9.0'
    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'com.google.android.material:material:1.8.0-alpha01'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'org.jetbrains.kotlin:kotlin-reflect:1.7.10'

    def retrofit_version = '2.9.0'
    def room_version = '2.4.3'

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "androidx.recyclerview:recyclerview:1.2.1"

    // Android Lifecycle Extensions
    def lifecycle_version = '2.5.1'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.activity:activity-ktx:1.5.1'
    kapt "android.arch.lifecycle:common-java8:1.1.1"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"

    // Navigation
    def navigation_version = "2.3.5"
    implementation 'androidx.navigation:navigation-fragment-ktx:2.5.2'
    implementation 'androidx.navigation:navigation-ui-ktx:2.5.2'

    // Glide for Images
    implementation 'com.github.bumptech.glide:glide:4.13.2'
    kapt 'com.github.bumptech.glide:compiler:4.13.2'

    // Retrofit 2
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation 'com.squareup.retrofit2:converter-moshi:2.9.0'
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit_version"
    implementation 'com.squareup.okhttp3:logging-interceptor:5.0.0-alpha.7'

    // Moshi
    def moshi_version = '1.14.0'
    implementation "com.squareup.moshi:moshi:$moshi_version"
    implementation "com.squareup.moshi:moshi-kotlin:$moshi_version"
    implementation "com.squareup.moshi:moshi-adapters:$moshi_version"

    // Dagger Hilt
    implementation 'com.google.dagger:hilt-android:2.43.2'
    kapt 'com.google.dagger:hilt-compiler:2.43.2'

    // Room 2
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.legacy:legacy-support-v4:1.0.0"
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    // optional - RxJava support for Room
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4'

    // Datastore preferences
    def datastore_version = "1.0.0"
    implementation "androidx.datastore:datastore-preferences:$datastore_version"

    implementation 'com.jakewharton.timber:timber:5.0.1'

    // debugImplementation because LeakCanary should only run in debug builds.
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.9.1'

    // testing
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testImplementation "androidx.test:core-ktx:1.4.0"
    testImplementation "androidx.test.ext:junit-ktx:1.1.3"
    testImplementation "androidx.arch.core:core-testing:2.1.0"
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.4'

    // kotest
    testImplementation 'io.kotest:kotest-runner-junit5:5.4.2'
    testImplementation 'io.kotest:kotest-assertions-core:5.4.2'
    testImplementation 'io.kotest:kotest-property:5.4.2'

    androidTestImplementation 'io.kotest:kotest-assertions-core:5.4.2'
    androidTestImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.4'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    debugImplementation 'androidx.fragment:fragment-testing:1.5.2'

    // For instrumented tests - with Kotlin
    androidTestImplementation 'com.google.dagger:hilt-android-testing:2.43.2'
    androidTestImplementation 'androidx.test:rules:1.4.0'
}

tasks.koverMergedHtmlReport {
    excludes = [
            "uk.ryanwong.giphytrending.data.di.*",
            "uk.ryanwong.giphytrending.di.*",
            "uk.ryanwong.giphytrending.data.source.di.*",
            "uk.ryanwong.giphytrending.databinding.*",
            "androidx.*",
            "com.bumptech.glide.*",
            "dagger.hilt.internal.aggregatedroot.codegen.*",
            "hilt_aggregated_deps.*",
            "uk.ryanwong.giphytrending.*.*MembersInjector",
            "uk.ryanwong.giphytrending.*.*Factory",
            "uk.ryanwong.giphytrending.*.*HiltModules*",
            "uk.ryanwong.giphytrending.data.source.local.*_Impl*",
            "uk.ryanwong.giphytrending.data.source.local.*Impl_Factory",
            "uk.ryanwong.giphytrending.DataBind*",
            "uk.ryanwong.giphytrending.BR",
            "uk.ryanwong.giphytrending.BuildConfig",
            "uk.ryanwong.giphytrending.Hilt*",
            "uk.ryanwong.giphytrending.*.Hilt_*"
    ]
}

tasks.koverMergedXmlReport {
    excludes = [
            "uk.ryanwong.giphytrending.data.di.*",
            "uk.ryanwong.giphytrending.di.*",
            "uk.ryanwong.giphytrending.data.source.di.*",
            "uk.ryanwong.giphytrending.databinding.*",
            "androidx.*",
            "com.bumptech.glide.*",
            "dagger.hilt.internal.aggregatedroot.codegen.*",
            "hilt_aggregated_deps.*",
            "uk.ryanwong.giphytrending.*.*MembersInjector",
            "uk.ryanwong.giphytrending.*.*Factory",
            "uk.ryanwong.giphytrending.*.*HiltModules*",
            "uk.ryanwong.giphytrending.data.source.local.*_Impl*",
            "uk.ryanwong.giphytrending.data.source.local.*Impl_Factory",
            "uk.ryanwong.giphytrending.DataBind*",
            "uk.ryanwong.giphytrending.BR",
            "uk.ryanwong.giphytrending.BuildConfig",
            "uk.ryanwong.giphytrending.Hilt*",
            "uk.ryanwong.giphytrending.*.Hilt_*"
    ]
}